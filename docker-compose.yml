services:
  user-service:
    build:
      context: ./user-service
      dockerfile: dockerfile
    ports:
      - "${USER_SERVICE_PORT:-3000}:3000"
    restart: unless-stopped
    networks:
      - winterra-network
    environment:
      - NODE_ENV=${USER_SERVICE_NODE_ENV:-development}
      - PORT=3000
      - RABBITMQ_URL=${RABBITMQ_URL}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${USER_DB_DATABASE:-user_service}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    depends_on:
      - rabbitmq
    env_file:
      - .env
    volumes:
      - ./winterra-8cf29-firebase-adminsdk-fbsvc-009018b663.json:/app/winterra-8cf29-firebase-adminsdk-fbsvc-009018b663.json

  avatar-service:
    build:
      context: ./avatar-service
      dockerfile: dockerfile
    ports:
      - "${AVATAR_SERVICE_PORT:-3001}:3000"
    restart: unless-stopped
    networks:
      - winterra-network
    environment:
      - NODE_ENV=${AVATAR_SERVICE_NODE_ENV:-development}
      - PORT=3000
      - RABBITMQ_URL=${RABBITMQ_URL}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${AVATAR_DB_DATABASE:-avatar_service}
    depends_on:
      - rabbitmq
    env_file:
      - .env

  community-service:
    build:
      context: ./community-service
      dockerfile: dockerfile
    ports:
      - "${COMMUNITY_SERVICE_PORT:-3002}:3000"
    restart: unless-stopped
    networks:
      - winterra-network
    environment:
      - NODE_ENV=${COMMUNITY_SERVICE_NODE_ENV:-development}
      - PORT=3000
      - RABBITMQ_URL=${RABBITMQ_URL}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${COMMUNITY_DB_DATABASE:-community_service}
    depends_on:
      - rabbitmq
    env_file:
      - .env

  habits-service:
    build:
      context: ./habits-service
      dockerfile: dockerfile
    ports:
      - "${HABITS_SERVICE_PORT:-3003}:3000"
    restart: unless-stopped
    networks:
      - winterra-network
    environment:
      - NODE_ENV=${HABITS_SERVICE_NODE_ENV:-development}
      - PORT=3000
      - RABBITMQ_URL=${RABBITMQ_URL}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${HABITS_DB_DATABASE:-habits_service}
    depends_on:
      - rabbitmq
    env_file:
      - .env

  consumer:
    build:
      context: ./consumer
      dockerfile: dockerfile
    ports:
      - "3010:3000"
    restart: unless-stopped
    networks:
      - winterra-network
    depends_on:
      - rabbitmq
      - avatar-service
    env_file:
      - .env
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - AVATAR_API_BASE_URL=${AVATAR_API_BASE_URL}


  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    restart: unless-stopped
    networks:
      - winterra-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

networks:
  winterra-network:
    driver: bridge
volumes:
  rabbitmq_data:
